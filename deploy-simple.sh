#!/bin/bash

# =============================================================================
# D√âPLOIEMENT SIMPLE EARTHIMAGERY - Mode Diagnostic
# =============================================================================
# Version simplifi√©e pour diagnostiquer les probl√®mes de d√©ploiement
# Version: 3.0 - Avec authentification unique et option --clean
# 
# Usage:
#   ./deploy-simple.sh           # D√©ploiement rapide (d√©faut)
#   ./deploy-simple.sh --clean   # D√©ploiement avec nettoyage complet
# =============================================================================

set -euo pipefail

# Configuration
SERVER_HOST="88.174.193.236"
SERVER_PORT="2221"
SERVER_USER="johann"
SERVER_PATH="developpement/earthimagery"

# Options de d√©ploiement
CLEAN_INSTALL=false

# Analyse des arguments
parse_arguments() {
    while [[ $# -gt 0 ]]; do
        case $1 in
            --clean)
                CLEAN_INSTALL=true
                shift
                ;;
            -h|--help)
                show_help
                exit 0
                ;;
            *)
                echo "‚ùå Argument inconnu: $1"
                show_help
                exit 1
                ;;
        esac
    done
}

# Affichage de l'aide
show_help() {
    echo "üîß EarthImagery - Script de D√©ploiement Simple"
    echo "=============================================="
    echo ""
    echo "Usage: $0 [OPTIONS]"
    echo ""
    echo "Options:"
    echo "  --clean    Force la suppression et r√©installation de node_modules"
    echo "  -h, --help Affiche cette aide"
    echo ""
    echo "Exemples:"
    echo "  $0           # D√©ploiement rapide (d√©faut)"
    echo "  $0 --clean  # D√©ploiement avec nettoyage complet"
    echo ""
}

# Couleurs
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m'

# Demande du mot de passe une seule fois
prompt_password() {
    echo "üîê Authentification SSH"
    echo "======================="
    read -s -p "Mot de passe SSH pour $SERVER_USER@$SERVER_HOST: " SSH_PASSWORD
    echo ""
    export SSHPASS="$SSH_PASSWORD"
    log "Mot de passe configur√© pour la session"
}

log() {
    echo -e "${GREEN}[$(date '+%H:%M:%S')]${NC} $*"
}

warn() {
    echo -e "${YELLOW}[WARN]${NC} $*"
}

error() {
    echo -e "${RED}[ERROR]${NC} $*"
}

echo "üîß EarthImagery - D√©ploiement Mode Diagnostic"
echo "============================================"

# Analyse des arguments
parse_arguments "$@"

if [ "$CLEAN_INSTALL" = true ]; then
    echo "üßπ Mode nettoyage complet activ√©"
fi
echo ""

# Authentification unique
prompt_password

# Test connexion
log "Test de connexion SSH..."
if ! sshpass -e ssh -p $SERVER_PORT -o ConnectTimeout=10 $SERVER_USER@$SERVER_HOST "echo 'Connexion OK'"; then
    error "Impossible de se connecter au serveur"
    exit 1
fi

# Arr√™t de l'application si elle tourne
log "V√©rification et arr√™t de l'application en cours..."
sshpass -e ssh -p $SERVER_PORT $SERVER_USER@$SERVER_HOST "
    cd $SERVER_PATH 2>/dev/null || { echo 'R√©pertoire $SERVER_PATH inexistant, premi√®re installation'; exit 0; }
    
    # Chargement de nvm pour PM2
    export NVM_DIR=\"\$HOME/.nvm\"
    [ -s \"\$NVM_DIR/nvm.sh\" ] && . \"\$NVM_DIR/nvm.sh\"
    [ -s \"\$NVM_DIR/bash_completion\" ] && . \"\$NVM_DIR/bash_completion\"
    
    # V√©rifier si PM2 et l'application existent
    if command -v pm2 >/dev/null 2>&1; then
        if pm2 describe earthimagery >/dev/null 2>&1; then
            echo 'üõë Application EarthImagery d√©tect√©e, arr√™t en cours...'
            ./pm2-manager.sh stop 2>/dev/null || pm2 stop earthimagery 2>/dev/null || echo 'Arr√™t manuel de PM2'
            echo '‚úÖ Application arr√™t√©e'
        else
            echo '‚ÑπÔ∏è  Aucune application EarthImagery en cours d'\''ex√©cution'
        fi
    else
        echo '‚ÑπÔ∏è  PM2 non install√© ou non accessible'
    fi
"

# Pr√©paration serveur
log "Pr√©paration du r√©pertoire serveur..."
sshpass -e ssh -p $SERVER_PORT $SERVER_USER@$SERVER_HOST "
    mkdir -p $SERVER_PATH
    echo 'Espace disque:'
    df -h | head -2
    echo ''
    echo 'Permissions:'
    ls -ld $SERVER_PATH
    echo ''
    echo 'Contenu existant:'
    ls -la $SERVER_PATH/ 2>/dev/null || echo 'R√©pertoire vide'
"

# D√©ploiement par √©tapes avec diagnostic
deploy_step() {
    local source="$1"
    local description="$2"
    local use_delete="$3"
    
    log "Copie de $description..."
    
    if [ ! -e "$source" ]; then
        warn "$source n'existe pas, ignor√©"
        return 0
    fi
    
    local delete_option=""
    if [ "$use_delete" = "true" ]; then
        delete_option="--delete"
    fi
    
    # Rsync avec options d√©taill√©es
    if sshpass -e rsync -avz --progress --partial --inplace $delete_option \
              --exclude='*.log' --exclude='.cache' --exclude='data/' \
              -e "ssh -p $SERVER_PORT" \
              "$source" $SERVER_USER@$SERVER_HOST:$SERVER_PATH/; then
        log "‚úÖ $description copi√© avec succ√®s"
    else
        local exit_code=$?
        if [ $exit_code -eq 23 ]; then
            warn "Code 23 pour $description - copie partielle (c'est souvent normal)"
        else
            error "Erreur critique pour $description (code: $exit_code)"
            return $exit_code
        fi
    fi
}

# D√©ploiement √©tape par √©tape
echo ""
deploy_step "package.json" "Configuration package.json" false
deploy_step "pm2.config.json" "Configuration PM2" false
deploy_step "pm2-manager.sh" "Script de gestion PM2" false
deploy_step "next.config.ts" "Configuration Next.js" false
deploy_step "package-lock.json" "Lock file" false
deploy_step ".env.local" "Variables d'environnement" false

deploy_step "config" "Configuration de l'application" true
deploy_step "public" "Assets statiques" true
# IMPORTANT: scripts sans slash final pour copier le r√©pertoire lui-m√™me  
deploy_step "scripts" "Scripts" true

# D√©ploiement de .next en dernier (le plus gros)
# IMPORTANT: .next sans slash final pour copier le r√©pertoire lui-m√™me
deploy_step ".next" "Build Next.js" true

# Node_modules en dernier (le plus risqu√©)
echo ""
log "D√©ploiement de node_modules (peut prendre du temps)..."
# IMPORTANT: node_modules sans slash final pour copier le r√©pertoire lui-m√™me
if sshpass -e rsync -avz --progress --partial --inplace --delete \
          --exclude='*.log' --exclude='.cache' --exclude='node_modules/.cache' --exclude='data/' \
          -e "ssh -p $SERVER_PORT" \
          node_modules $SERVER_USER@$SERVER_HOST:$SERVER_PATH/; then
    log "‚úÖ node_modules copi√©"
else
    warn "Probl√®me avec node_modules (code: $?), mais souvent non critique"
fi

# Installation des d√©pendances apr√®s transfert
echo ""
if [ "$CLEAN_INSTALL" = true ]; then
    log "Nettoyage et r√©installation compl√®te des d√©pendances..."
    if sshpass -e ssh -p $SERVER_PORT $SERVER_USER@$SERVER_HOST "
        # Chargement de nvm et activation de la version courante
        export NVM_DIR=\"\$HOME/.nvm\"
        [ -s \"\$NVM_DIR/nvm.sh\" ] && . \"\$NVM_DIR/nvm.sh\"
        [ -s \"\$NVM_DIR/bash_completion\" ] && . \"\$NVM_DIR/bash_completion\"
        
        # Nettoyage complet et r√©installation
        cd $SERVER_PATH && rm -rf node_modules package-lock.json && npm install --production
    "; then
        log "‚úÖ D√©pendances r√©install√©es avec succ√®s (mode propre)"
    else
        warn "Erreur lors de l'installation propre des d√©pendances (code: $?)"
    fi
else
    log "Installation des d√©pendances sur le serveur..."
    if sshpass -e ssh -p $SERVER_PORT $SERVER_USER@$SERVER_HOST "
        # Chargement de nvm et activation de la version courante
        export NVM_DIR=\"\$HOME/.nvm\"
        [ -s \"\$NVM_DIR/nvm.sh\" ] && . \"\$NVM_DIR/nvm.sh\"
        [ -s \"\$NVM_DIR/bash_completion\" ] && . \"\$NVM_DIR/bash_completion\"
        
        # Aller dans le r√©pertoire et installer les d√©pendances
        cd $SERVER_PATH && npm install --production
    "; then
        log "‚úÖ D√©pendances install√©es avec succ√®s"
    else
        warn "Erreur lors de l'installation des d√©pendances (code: $?)"
    fi
fi

# V√©rification finale
echo ""
log "V√©rification finale..."
sshpass -e ssh -p $SERVER_PORT $SERVER_USER@$SERVER_HOST "
    cd $SERVER_PATH
    echo 'Contenu final:'
    ls -la
    echo ''
    echo 'V√©rifications critiques:'
    [ -f 'package.json' ] && echo '‚úÖ package.json' || echo '‚ùå package.json'
    [ -d '.next' ] && echo '‚úÖ .next/' || echo '‚ùå .next/'
    [ -d 'node_modules' ] && echo '‚úÖ node_modules/' || echo '‚ùå node_modules/'
    [ -f '.env.local' ] && echo '‚úÖ .env.local' || echo '‚ùå .env.local'
    [ -d 'config' ] && echo '‚úÖ config/' || echo '‚ùå config/'
    [ -d 'public' ] && echo '‚úÖ public/' || echo '‚ùå public/'
    [ -d 'scripts' ] && echo '‚úÖ scripts/' || echo '‚ùå scripts/'
    [ -f 'pm2.config.json' ] && echo '‚úÖ pm2.config.json' || echo '‚ùå pm2.config.json'
    [ -x 'pm2-manager.sh' ] && echo '‚úÖ pm2-manager.sh (ex√©cutable)' || echo '‚ùå pm2-manager.sh'
    [ -f 'node_modules/next/package.json' ] && echo '‚úÖ node_modules/next (install√©)' || echo '‚ùå node_modules/next'
    
    echo ''
    echo 'üîß Configuration des permissions...'
    chmod +x pm2-manager.sh 2>/dev/null && echo '‚úÖ pm2-manager.sh rendu ex√©cutable' || echo '‚ö†Ô∏è Erreur permissions'
"

echo ""
log "üéâ D√©ploiement termin√© !"
echo ""
echo "üöÄ Pour d√©marrer l'application avec PM2:"
echo "  ssh -p $SERVER_PORT $SERVER_USER@$SERVER_HOST"
echo "  cd $SERVER_PATH"
echo "  ./pm2-manager.sh start"
echo ""
echo "ÔøΩ Red√©marrage automatique de l'application..."
sshpass -e ssh -p $SERVER_PORT $SERVER_USER@$SERVER_HOST "
    cd $SERVER_PATH
    
    # Chargement de nvm pour PM2
    export NVM_DIR=\"\$HOME/.nvm\"
    [ -s \"\$NVM_DIR/nvm.sh\" ] && . \"\$NVM_DIR/nvm.sh\"
    [ -s \"\$NVM_DIR/bash_completion\" ] && . \"\$NVM_DIR/bash_completion\"
    
    # Red√©marrer l'application
    echo 'üöÄ Red√©marrage de l'\''application...'
    ./pm2-manager.sh start
    sleep 2
    echo 'üìä Statut final:'
    ./pm2-manager.sh status
"
echo ""
echo "‚úÖ Application red√©marr√©e automatiquement !"
echo ""
echo "üìã Autres commandes PM2 utiles:"
echo "  ssh -p $SERVER_PORT $SERVER_USER@$SERVER_HOST 'cd $SERVER_PATH && ./pm2-manager.sh logs'"
echo "  ssh -p $SERVER_PORT $SERVER_USER@$SERVER_HOST 'cd $SERVER_PATH && ./pm2-manager.sh restart'"