#!/bin/bash

# =============================================================================
# SCRIPT DE D√âPLOIEMENT EARTHIMAGERY
# =============================================================================
# D√©ploie l'application Next.js build√©e sur le serveur de production
# Version: 3.0 - Avec authentification unique et option --clean
# 
# Usage:
#   ./deploy.sh           # D√©ploiement rapide (d√©faut)
#   ./deploy.sh --clean   # D√©ploiement avec nettoyage complet
# =============================================================================

set -euo pipefail

# Configuration du serveur
SERVER_HOST="88.174.193.236"
SERVER_PORT="2221"
SERVER_USER="johann"
SERVER_PATH="developpement/earthimagery"

# Options de d√©ploiement
CLEAN_INSTALL=false

# Analyse des arguments
parse_arguments() {
    while [[ $# -gt 0 ]]; do
        case $1 in
            --clean)
                CLEAN_INSTALL=true
                shift
                ;;
            -h|--help)
                show_deployment_help
                exit 0
                ;;
            *)
                echo "‚ùå Argument inconnu: $1"
                show_deployment_help
                exit 1
                ;;
        esac
    done
}

# Affichage de l'aide
show_deployment_help() {
    echo "üåç EarthImagery - Script de D√©ploiement Principal"
    echo "================================================"
    echo ""
    echo "Usage: $0 [OPTIONS]"
    echo ""
    echo "Options:"
    echo "  --clean    Force la suppression et r√©installation de node_modules"
    echo "  -h, --help Affiche cette aide"
    echo ""
    echo "Exemples:"
    echo "  $0           # D√©ploiement rapide (d√©faut)"
    echo "  $0 --clean  # D√©ploiement avec nettoyage complet"
    echo ""
}

# Couleurs pour les logs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Demande du mot de passe une seule fois
prompt_password() {
    echo "üîê Authentification SSH"
    echo "======================="
    read -s -p "Mot de passe SSH pour $SERVER_USER@$SERVER_HOST: " SSH_PASSWORD
    echo ""
    export SSHPASS="$SSH_PASSWORD"
    log "INFO" "Mot de passe configur√© pour la session"
}

log() {
    local level="$1"
    shift
    local message="$*"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    
    case "$level" in
        "INFO")  echo -e "${GREEN}[INFO]${NC} $timestamp - $message" ;;
        "WARN")  echo -e "${YELLOW}[WARN]${NC} $timestamp - $message" ;;
        "ERROR") echo -e "${RED}[ERROR]${NC} $timestamp - $message" ;;
        "DEBUG") echo -e "${BLUE}[DEBUG]${NC} $timestamp - $message" ;;
    esac
}

# V√©rifications pr√©alables
check_prerequisites() {
    log "INFO" "üîç V√©rification des pr√©requis..."
    
    # V√©rifier que le build existe
    if [ ! -d ".next" ]; then
        log "ERROR" "Le r√©pertoire .next n'existe pas. Lancez 'npm run build' d'abord."
        exit 1
    fi
    
    # V√©rifier que node_modules existe
    if [ ! -d "node_modules" ]; then
        log "ERROR" "Le r√©pertoire node_modules n'existe pas. Lancez 'npm install' d'abord."
        exit 1
    fi
    
    # V√©rifier SSH
    if ! command -v ssh &> /dev/null; then
        log "ERROR" "SSH n'est pas install√©."
        exit 1
    fi
    
    # Test de connexion SSH
    log "INFO" "üîê Test de connexion SSH..."
    if ! ssh -p $SERVER_PORT -o ConnectTimeout=10 -o BatchMode=yes $SERVER_USER@$SERVER_HOST "echo 'Connexion OK'" &>/dev/null; then
        log "WARN" "Impossible de se connecter automatiquement. Assurez-vous que:"
        log "WARN" "  - La cl√© SSH est configur√©e"
        log "WARN" "  - Le serveur est accessible"
        log "WARN" "La connexion sera tent√©e lors du d√©ploiement..."
    else
        log "INFO" "‚úÖ Connexion SSH OK"
    fi
    
    log "INFO" "‚úÖ Pr√©requis v√©rifi√©s"
}

# Affichage des informations de d√©ploiement
show_deployment_info() {
    log "INFO" "üìä Informations de d√©ploiement:"
    echo ""
    echo "üéØ Serveur cible:"
    echo "   Host: $SERVER_HOST"
    echo "   Port: $SERVER_PORT"
    echo "   User: $SERVER_USER"
    echo "   Path: $SERVER_PATH"
    echo ""
    echo "üì¶ Fichiers √† d√©ployer:"
    echo "   üìÅ .next/ ($(du -sh .next | cut -f1))"
    echo "   üìÅ node_modules/ ($(du -sh node_modules | cut -f1))"
    echo "   üìÅ config/ ($(du -sh config | cut -f1))"
    echo "   üìÅ public/ ($(du -sh public | cut -f1))"
    echo "   üìÅ scripts/ ($(du -sh scripts | cut -f1))"
    echo "   üìÑ package.json"
    echo "   üìÑ next.config.ts"
    echo "   üìÑ package-lock.json"
    echo "   üìÑ .env.local"
    echo ""
}

# Cr√©ation du r√©pertoire sur le serveur
prepare_server() {
    log "INFO" "üèóÔ∏è Pr√©paration du serveur..."
    
    sshpass -e ssh -p $SERVER_PORT $SERVER_USER@$SERVER_HOST "
        mkdir -p $SERVER_PATH
        cd $SERVER_PATH
        echo 'R√©pertoire pr√©par√© sur le serveur'
    "
    
    log "INFO" "‚úÖ Serveur pr√©par√©"
}

# Arr√™t de l'application en cours
stop_running_app() {
    log "INFO" "üõë V√©rification et arr√™t de l'application en cours..."
    
    sshpass -e ssh -p $SERVER_PORT $SERVER_USER@$SERVER_HOST "
        cd $SERVER_PATH 2>/dev/null || { echo 'R√©pertoire $SERVER_PATH inexistant, premi√®re installation'; exit 0; }
        
        # Chargement de nvm pour PM2
        export NVM_DIR=\"\$HOME/.nvm\"
        [ -s \"\$NVM_DIR/nvm.sh\" ] && . \"\$NVM_DIR/nvm.sh\"
        [ -s \"\$NVM_DIR/bash_completion\" ] && . \"\$NVM_DIR/bash_completion\"
        
        # V√©rifier si PM2 et l'application existent
        if command -v pm2 >/dev/null 2>&1; then
            if pm2 describe earthimagery >/dev/null 2>&1; then
                echo 'üõë Application EarthImagery d√©tect√©e, arr√™t en cours...'
                ./pm2-manager.sh stop 2>/dev/null || pm2 stop earthimagery 2>/dev/null || echo 'Arr√™t manuel de PM2'
                echo '‚úÖ Application arr√™t√©e avec succ√®s'
            else
                echo '‚ÑπÔ∏è  Aucune application EarthImagery en cours d'\''ex√©cution'
            fi
        else
            echo '‚ÑπÔ∏è  PM2 non install√© ou non accessible'
        fi
    "
    
    log "INFO" "‚úÖ V√©rification de l'application termin√©e"
}

# D√©ploiement des fichiers
deploy_files() {
    log "INFO" "üöÄ D√©but du d√©ploiement des fichiers..."
    
    # Fonction helper pour copier avec rsync
    copy_with_rsync() {
        local source="$1"
        local description="$2"
        local extra_options="$3"
        
        log "INFO" "üìÅ Copie de $description..."
        
        # Options rsync robustes
        local rsync_options="-avz --progress --partial --inplace $extra_options"
        
        if sshpass -e rsync $rsync_options -e "ssh -p $SERVER_PORT" "$source" $SERVER_USER@$SERVER_HOST:$SERVER_PATH/; then
            log "INFO" "‚úÖ $description copi√© avec succ√®s"
        else
            local exit_code=$?
            log "WARN" "‚ö†Ô∏è Erreur lors de la copie de $description (code: $exit_code)"
            if [ $exit_code -eq 23 ]; then
                log "WARN" "Code 23: Certains fichiers non transf√©r√©s, mais copie partiellement r√©ussie"
                log "INFO" "Tentative de continuation..."
            else
                log "ERROR" "Erreur critique lors de la copie de $description"
                return $exit_code
            fi
        fi
    }
    
    # V√©rifier l'espace disque sur le serveur
    log "INFO" "üíæ V√©rification de l'espace disque sur le serveur..."
    ssh -p $SERVER_PORT $SERVER_USER@$SERVER_HOST "
        echo 'üìä Espace disque disponible:'
        df -h $SERVER_PATH || df -h .
        echo ''
        echo 'üìÅ Permissions du r√©pertoire:'
        ls -ld $SERVER_PATH 2>/dev/null || echo 'R√©pertoire √† cr√©er'
    "
    
    # Copie des r√©pertoires principaux avec options adapt√©es
    # IMPORTANT: Tous sans slash final pour copier les r√©pertoires eux-m√™mes
    copy_with_rsync ".next" "Build Next.js (.next/)" "--delete --exclude='data/'"
    copy_with_rsync "node_modules" "D√©pendances (node_modules/)" "--delete --exclude='*.log' --exclude='.cache' --exclude='data/'"
    copy_with_rsync "config" "Configuration de l'application (config/)" "--delete --exclude='data/'"
    copy_with_rsync "public" "Assets statiques (public/)" "--delete --exclude='data/'"
    copy_with_rsync "scripts" "Scripts de production (scripts/)" "--delete --exclude='data/'"
    
    # Copie des fichiers de configuration avec scp (plus fiable pour les petits fichiers)
    log "INFO" "üìÑ Copie des fichiers de configuration..."
    if sshpass -e scp -P $SERVER_PORT package.json package-lock.json next.config.ts pm2.config.json pm2-manager.sh .env.local $SERVER_USER@$SERVER_HOST:$SERVER_PATH/; then
        log "INFO" "‚úÖ Fichiers de configuration copi√©s"
        
        # Rendre pm2-manager.sh ex√©cutable
        log "INFO" "üîß Configuration des permissions..."
        if sshpass -e ssh -p $SERVER_PORT $SERVER_USER@$SERVER_HOST "chmod +x $SERVER_PATH/pm2-manager.sh"; then
            log "INFO" "‚úÖ Permissions configur√©es"
        else
            log "WARN" "‚ö†Ô∏è Erreur lors de la configuration des permissions"
        fi
    else
        log "WARN" "‚ö†Ô∏è Erreur lors de la copie des fichiers de configuration"
    fi
    
    # Installation des d√©pendances sur le serveur distant
    if [ "$CLEAN_INSTALL" = true ]; then
        log "INFO" "üßπ Nettoyage et r√©installation compl√®te des d√©pendances..."
        if sshpass -e ssh -p $SERVER_PORT $SERVER_USER@$SERVER_HOST "
            # Chargement de nvm et activation de la version courante
            export NVM_DIR=\"\$HOME/.nvm\"
            [ -s \"\$NVM_DIR/nvm.sh\" ] && . \"\$NVM_DIR/nvm.sh\"
            [ -s \"\$NVM_DIR/bash_completion\" ] && . \"\$NVM_DIR/bash_completion\"
            
            # Nettoyage complet et r√©installation
            cd $SERVER_PATH && rm -rf node_modules package-lock.json && npm install --production
        "; then
            log "INFO" "‚úÖ D√©pendances r√©install√©es avec succ√®s (mode propre)"
        else
            log "WARN" "‚ö†Ô∏è Erreur lors de l'installation propre des d√©pendances"
        fi
    else
        log "INFO" "üì¶ Installation des d√©pendances sur le serveur..."
        if sshpass -e ssh -p $SERVER_PORT $SERVER_USER@$SERVER_HOST "
            # Chargement de nvm et activation de la version courante
            export NVM_DIR=\"\$HOME/.nvm\"
            [ -s \"\$NVM_DIR/nvm.sh\" ] && . \"\$NVM_DIR/nvm.sh\"
            [ -s \"\$NVM_DIR/bash_completion\" ] && . \"\$NVM_DIR/bash_completion\"
            
            # Aller dans le r√©pertoire et installer les d√©pendances
            cd $SERVER_PATH && npm install --production
        "; then
            log "INFO" "‚úÖ D√©pendances install√©es avec succ√®s"
        else
            log "WARN" "‚ö†Ô∏è Erreur lors de l'installation des d√©pendances"
        fi
    fi    log "INFO" "üéâ D√©ploiement des fichiers termin√©"
}

# V√©rification post-d√©ploiement
verify_deployment() {
    log "INFO" "üîç V√©rification du d√©ploiement..."
    
    sshpass -e ssh -p $SERVER_PORT $SERVER_USER@$SERVER_HOST "
        cd $SERVER_PATH
        echo 'üìä Contenu du r√©pertoire de d√©ploiement:'
        ls -la
        echo ''
        echo 'üìÅ V√©rification des r√©pertoires critiques:'
        [ -d '.next' ] && echo '‚úÖ .next/ pr√©sent' || echo '‚ùå .next/ manquant'
        [ -d 'node_modules' ] && echo '‚úÖ node_modules/ pr√©sent' || echo '‚ùå node_modules/ manquant'
        [ -d 'config' ] && echo '‚úÖ config/ pr√©sent' || echo '‚ùå config/ manquant'
        [ -d 'public' ] && echo '‚úÖ public/ pr√©sent' || echo '‚ùå public/ manquant'
        [ -d 'scripts' ] && echo '‚úÖ scripts/ pr√©sent' || echo '‚ùå scripts/ manquant'
        [ -f 'package.json' ] && echo '‚úÖ package.json pr√©sent' || echo '‚ùå package.json manquant'
        [ -f 'next.config.ts' ] && echo '‚úÖ next.config.ts pr√©sent' || echo '‚ùå next.config.ts manquant'
        [ -f '.env.local' ] && echo '‚úÖ .env.local pr√©sent' || echo '‚ùå .env.local manquant'
        echo ''
        echo 'üÜî Build ID:'
        cat .next/BUILD_ID 2>/dev/null || echo 'BUILD_ID non trouv√©'
    "
    
    log "INFO" "‚úÖ V√©rification termin√©e"
}

# Instructions de d√©marrage
show_startup_instructions() {
    echo ""
    log "INFO" "üöÄ Red√©marrage automatique de l'application..."
    
    # Red√©marrage automatique
    sshpass -e ssh -p $SERVER_PORT $SERVER_USER@$SERVER_HOST "
        cd $SERVER_PATH
        
        # Chargement de nvm pour PM2
        export NVM_DIR=\"\$HOME/.nvm\"
        [ -s \"\$NVM_DIR/nvm.sh\" ] && . \"\$NVM_DIR/nvm.sh\"
        [ -s \"\$NVM_DIR/bash_completion\" ] && . \"\$NVM_DIR/bash_completion\"
        
        # Red√©marrer l'application
        echo 'üöÄ Red√©marrage de l'\''application...'
        ./pm2-manager.sh start
        sleep 3
        echo ''
        echo 'ÔøΩ Statut final de l'\''application:'
        ./pm2-manager.sh status
    "
    
    echo ""
    log "INFO" "‚úÖ Application red√©marr√©e automatiquement !"
    echo ""
    echo "üåê L'application est accessible sur:"
    echo "    http://$SERVER_HOST:11000"
    echo ""
    echo "üìã Commandes utiles pour la gestion:"
    echo "    ssh -p $SERVER_PORT $SERVER_USER@$SERVER_HOST 'cd $SERVER_PATH && ./pm2-manager.sh logs'"
    echo "    ssh -p $SERVER_PORT $SERVER_USER@$SERVER_HOST 'cd $SERVER_PATH && ./pm2-manager.sh restart'"
    echo "    ssh -p $SERVER_PORT $SERVER_USER@$SERVER_HOST 'cd $SERVER_PATH && ./pm2-manager.sh stop'"
    echo ""
}

# Fonction principale
main() {
    echo ""
    echo "üåç EarthImagery - Script de d√©ploiement"
    echo "========================================"
    
    # Analyse des arguments
    parse_arguments "$@"
    
    if [ "$CLEAN_INSTALL" = true ]; then
        echo "üßπ Mode nettoyage complet activ√©"
    fi
    echo ""
    
    prompt_password
    check_prerequisites
    show_deployment_info
    
    # Confirmation avant d√©ploiement
    read -p "Voulez-vous continuer le d√©ploiement ? (y/N): " -n 1 -r
    echo ""
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        log "INFO" "D√©ploiement annul√©."
        exit 0
    fi
    
    stop_running_app
    prepare_server
    deploy_files
    verify_deployment
    show_startup_instructions
    
    log "INFO" "üéâ D√©ploiement termin√© avec succ√®s !"
}

# Point d'entr√©e
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi